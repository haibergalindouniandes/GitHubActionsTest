name: Pruebas unitarias
on:
  push:
    branches: ['**_HU', 'develop']
  pull_request:
    types: [ 'opened', 'labeled', 'unlabeled', 'synchronize', 'edited', 'ready_for_review', 'reopened', 'unlocked' ]
jobs:
  job_pruebas_automaticas:
    name: Ejecución Pruebas Automatizadas
    runs-on: windows-latest
    outputs:
      mensaje-commit: ${{ steps.obtener-mensaje-commit.outputs.commit-msg }}
    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v2
      - name: Obtener mensaje del pull request
        id: obtener-mensaje-commit
        run: echo "::set-output name=commit-msg:: - ${{ github.event.pull_request.title }}"  
      - name: Configuracion de entorno de python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Instalacion de librerias y dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Correr pruebas automatizadas
        id: correr-pruebas-automatizadas
        run: python -m unittest discover -s tests
      - name: Validar resultado con errores
        if: '${{ failure() }}'
        env:
          MENSAJE_ERROR: Una o varias pruebas fallaron
        run: 'echo "::set-output name=respuesta::${MENSAJE_ERROR}"'
      - name: Validar resultado sin errores
        if: '${{ success() }}'
        env:
          MENSAJE_EXITO: Todas las pruebas fueron exitosas
        run: 'echo "::set-output name=respuesta::${MENSAJE_EXITO}"'
      - name: Cálculo de cubrimiento
        id: cubrimiento
        run: |
          coverage run -m unittest discover -s tests
          coverage report -m

  job_solicitud_pull_automatizado:
      if: ${{ contains(github.event.head_commit.message, '[Build_PullRequest]') }}
      name: Ejecución Pull Request Automatizado
      needs: job_pruebas_automaticas
      runs-on: ubuntu-latest
      outputs:
        pull-request-url: ${{ steps.obtener-url-pull_request.outputs.apr-url }}
      steps:
        - name: Checkout de repositorio
          uses: actions/checkout@v2
        - name: Obtener nombre de la rama
          id: obtener_rama
          shell: bash
          run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        - name: Ejecución Pull Request Automatizado
          id: pull-request-automatizado
          uses: repo-sync/pull-request@v2
          with:
            destination_branch: "develop"
            pr_title: "Pull Request Automatizado: ${{ github.event.head_commit.message }}"
            pr_body: "Se genera Pull Request Automatizado: ${{ github.event.head_commit.message }}"
            pr_labels: '' 
            github_token: ${{ secrets.GITHUB_TOKEN }}
        - name: Obtener URL del Pull Request
          id: obtener-url-pull_request
          run: echo "::set-output name=apr-url::${{ steps.pull-request-automatizado.outputs.pr_url }}"

  job_merge_automatizado:
      if: ${{ contains(github.event.head_commit.message, '[Build_Merge]') }}
      name: Ejecución Merge Automatizado
      needs: job_solicitud_pull_automatizado
      runs-on: ubuntu-latest
      steps:
        - name: Ejecución Merge Automatizado
          id: merge-automatizado
          uses: pascalgn/automerge-action@v0.15.3
          env:
            GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
            MERGE_LABELS: ''
            MERGE_COMMIT_MESSAGE: "Merge automatico de: ${{ needs.job_pruebas_automaticas.outputs.mensaje-commit }}"
            PULL_REQUEST: ${{ needs.job_solicitud_pull_automatizado.outputs.pull-request-url }}
        - name: Retroalimentación del Merge
          if: steps.merge-automatizado.outputs.mergeResult == 'merged'
          run: >
            echo "Solicitud de Merge número (${{ steps.merge-automatizado.outputs.pullRequestNumber }}) fusionada con exito!"